from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from filtres.chat_type import ChatTypeFilter
from keyboards.kb import get_builder, buy, menu, buld_new
from db import read_data, create_data


router = Router()
router.message.filter(ChatTypeFilter(chat_type=["private"]))
start_photo = FSInputFile("app/images/image1.jpg")


@router.message(Command("start"))
async def my_answer(message: Message):
    """
    –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —è–∑—ã–∫, –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–∫–∏...
    –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª–∏–±–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–∏–±–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
    –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞, –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç—ã
    """
    get_id = await read_data(args=(message.from_user.id,))
    if get_id == []:
        await message.answer_photo(
            photo=start_photo,
            caption=f"üåøGreenBit –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Åüëã\n. –í—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ, —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è?\n –ù–∞–∂–º–∏—Ç–µ ‚¨áüÜï\n –í–∞—à —è–∑—ã–∫ - {message.from_user.language_code}",
            reply_markup=buld_new(),
        )
    elif message.from_user.id == get_id[0][0]:
        await message.answer_photo(
            photo=start_photo,
            caption="üåøGreenBit —Å–Ω–æ–≤–∞ —Ä–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—åüëã!",
            reply_markup=get_builder(),
        )


@router.callback_query(F.data == "who you")
async def who(callback: types.CallbackQuery):
    await callback.message.answer(
        text="–ú—ã - –∫—Ä–∏–ø—Ç–æ-–∫–æ–º–ø–∞–Ω–∏—è <b>GreenBit</b>, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏üíö",
        parse_mode="HTML",
    )
    await callback.message.answer(
        tetx="üíÅ‚Äç–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å <b>GreenBit</b> –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –≤–Ω–µ—Å–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≤–∫–ª–∞–¥–∞ –≤ –æ—Ö—Ä–∞–Ω—É –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.",
        parse_mode="HTML",
    )


@router.callback_query(F.data == "how buy")
async def how(callback: types.CallbackQuery):
    await callback.message.answer(
        text="–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ö—É–ø–∏—Ç—å</b>, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –≤–∞—Å –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏üë®‚Äç",
        parse_mode="HTML",
        reply_markup=buy(),
    )


@router.callback_query(F.data == "menu")
async def menu_answ(callback: types.CallbackQuery):
    await callback.message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!üü¢", reply_markup=menu())


@router.callback_query(F.data == "trade")
async def kurs_otvet(callback: types.CallbackQuery):
    await callback.answer(
        text="–°–∫–æ—Ä–æ —Ç—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã!üíö",
    )


@router.callback_query(F.data == "back")
async def back_to(callback: types.CallbackQuery):
    await callback.message.answer(
        text="–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /start üîÜ"
    )


@router.callback_query(F.data == "new")
async def set_new_user(callback: types.CallbackQuery):
    await create_data(data=(callback.from_user.id,))
    await callback.message.answer(text="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –≤—ã —Å –Ω–∞–º–∏! –ù–∞–∂–º–∏—Ç–µ /start")
