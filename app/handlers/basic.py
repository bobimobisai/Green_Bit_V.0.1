from typing import List
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from filtres.chat_type import ChatTypeFilter
from keyboards.kb import (
    get_builder_user,
    buy,
    menu,
    get_builder_auth_user,
    language,
    get_builder_auth_user_en,
    join_en,
)
from db import read_data, create_data, update_data


router = Router()
router.message.filter(ChatTypeFilter(chat_type=["private"]))
start_photo = FSInputFile("app/images/image1.jpg")


@router.message(Command("start"))
async def my_answer(message: Message):
    text_auth_ru = "üåøGreenBit —Å–Ω–æ–≤–∞ —Ä–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—åüëã!"
    text_auth_en = "üåøGreenBit glad to see you againüëã!"
    user_data = await read_data(args=(message.from_user.id,))
    if user_data == []:
        await message.answer_photo(
            photo=start_photo,
            caption="üåøGreenBit –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Åüëã!\n–í—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ, —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º?\n–ù–∞–∂–º–∏—Ç–µ Join‚úÖ\nSwith language üî§",
            reply_markup=get_builder_user(),
        )
    elif message.from_user.id == user_data[0][0] and user_data[0][6] == "ru":
        await message.answer_photo(
            photo=start_photo,
            caption=text_auth_ru,
            reply_markup=get_builder_auth_user(),
        )
    elif message.from_user.id == user_data[0][0] and user_data[0][6] == "en":
        await message.answer_photo(
            photo=start_photo,
            caption=text_auth_en,
            reply_markup=get_builder_auth_user_en(),
        )
    elif message.from_user.id == user_data[0][0]:
        await message.answer_photo(
            photo=start_photo,
            caption=text_auth_en,
            reply_markup=get_builder_auth_user_en(),
        )


@router.callback_query(F.data == "who you")
async def who(callback: types.CallbackQuery):
    await callback.message.answer(
        text="–ú—ã - –∫—Ä–∏–ø—Ç–æ-–∫–æ–º–ø–∞–Ω–∏—è <b>GreenBit</b>, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏üíö",
        parse_mode="HTML",
    )
    await callback.message.answer(
        tetx="üíÅ‚Äç–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å <b>GreenBit</b> –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –≤–Ω–µ—Å–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≤–∫–ª–∞–¥–∞ –≤ –æ—Ö—Ä–∞–Ω—É –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.",
        parse_mode="HTML",
    )


@router.callback_query(F.data == "how buy")
async def how(callback: types.CallbackQuery):
    await callback.message.answer(
        text="–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ö—É–ø–∏—Ç—å</b>, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –≤–∞—Å –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏üë®‚Äç",
        parse_mode="HTML",
        reply_markup=buy(),
    )


@router.callback_query(F.data == "menu")
async def menu_answ(callback: types.CallbackQuery):
    await callback.message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!üü¢", reply_markup=menu())


@router.callback_query(F.data == "trade")
async def kurs_otvet(callback: types.CallbackQuery):
    await callback.answer(
        text="–°–∫–æ—Ä–æ —Ç—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã!üíö",
    )


@router.callback_query(F.data == "back")
async def back_to(callback: types.CallbackQuery):
    await callback.message.answer(
        text="–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /start üîÜ"
    )


@router.callback_query(F.data == "new")
async def set_new_user(callback: types.CallbackQuery):
    await create_data(data=(callback.from_user.id,))
    await callback.message.answer(text="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –≤—ã —Å –Ω–∞–º–∏! –ù–∞–∂–º–∏—Ç–µ /start")


@router.callback_query(F.data == "join_lang")
async def set_new_user_lang(callback: types.CallbackQuery):
    await create_data(data=(callback.from_user.id,))
    await update_data(
        column="user_language",
        data="'en'",
        args=(callback.from_user.id,),
    )
    await callback.message.answer(
        text="Congratulations! Now you are with us! Click /start"
    )


@router.callback_query(F.data == "sw")
async def sw_lang(callback: types.CallbackQuery):
    await callback.message.answer(text="Choose language!", reply_markup=language())


@router.callback_query(F.data == "en")
async def sw_en(callback: types.CallbackQuery):
    user_data = await read_data(args=(callback.from_user.id,))
    if user_data == []:
        await callback.message.answer(
            text="Please Join‚úÖ to change language!", reply_markup=join_en()
        )
    else:
        await update_data(
            column="user_language",
            data="'en'",
            args=(callback.from_user.id,),
        )
        await callback.message.answer(
            text="Great, the language has been successfully changed to EN!\nClick /start"
        )


@router.callback_query(F.data == "ru")
async def sw_ru(callback: types.CallbackQuery):
    user_data = await read_data(args=(callback.from_user.id,))
    if user_data == []:
        await callback.message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å -> Join‚úÖ, –¥–ª—è —Å–º–µ–Ω—ã –Ø–∑—ã–∫–∞!",
            reply_markup=get_builder_user(),
        )
    await update_data(
        column="user_language",
        data="'ru'",
        args=(callback.from_user.id,),
    )
    await callback.message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ, —è–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ RU!\n–ù–∞–∂–º–∏—Ç–µ /start"
    )
