from aiogram import types, Router, F

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keybords.kb import language, settings

from db import create_data, update_data, delete_data

who_by_img = types.FSInputFile("app/images/who_by.jpg")
settings_img = types.FSInputFile("app/images/settings.jpg")

router = Router()


class Form(StatesGroup):
    user_id = State()
    auth_status = State()
    user_language = State()


# –∫–æ–ª–±–µ–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –¥–ª—è –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data == "en")
async def lang_en(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text="English language selectedüíö\nGo in Menu -> /menu",
    )
    await state.update_data(user_language="en")
    await state.set_state(Form.user_language)


@router.callback_query(F.data == "ru")
async def lang_ru(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ωüíö!\n–ü–µ—Ä–µ–π—Ç–∏ –≤  Menu -> /menu",
    )
    await state.update_data(user_language="ru")
    await state.set_state(Form.user_language)


# –∫–æ–ª–±–µ–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –¥–ª—è –∑–∞—Ä–µ–≥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data == "en_db")
async def lang_en_db(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.update_data(user_language="en")
        await state.set_state(Form.user_language)
        await update_data(
            column="user_language",
            data="'en'",
            args=(callback.from_user.id,),
        )
    except Exception as e:
        await callback.message.answer(
            text="Ooooh fuck...\nSomething's broken bup beep...\nTry later.",
        )
        print(e)
    else:
        await callback.message.answer(
            text="English language selectedüíö\nGo in Menu -> /menu",
        )


@router.callback_query(F.data == "ru_db")
async def lang_ru_db(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.update_data(user_language="ru")
        await state.set_state(Form.user_language)
        await update_data(
            column="user_language",
            data="'ru'",
            args=(callback.from_user.id,),
        )
    except Exception as e:
        await callback.message.answer(
            text="–ß—Ç–æ —Ç–æ –±–ª—è—Ç—å —Å–ª–æ–º–∞–ª–æ—Å—å:(\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        )
        print(e)
    else:
        await callback.message.answer(
            text="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ωüíö!\n–ü–µ—Ä–µ–π—Ç–∏ –≤  Menu -> /menu",
        )


# –∫–æ–ª–±–µ–∫ –¥–ª—è –∫—Ç–æ –≤—ã
@router.callback_query(F.data == "who_you")
async def menu_new_who(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    user_language = user_data.get("user_language")
    try:
        if user_language == "en":
            text_1 = "We are a crypto company <b>GreenBit</b> that aims to support environmentally disruptive lifestyles"
            text_2 = "üíÅ‚ÄçMembers can earn <b>GreenBit</b> for making environmentally responsible decisions and doing their part to protect the environment."
        elif user_language == "ru":
            text_1 = "–ú—ã - –∫—Ä–∏–ø—Ç–æ-–∫–æ–º–ø–∞–Ω–∏—è <b>GreenBit</b>, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏"
            text_2 = "üíÅ‚Äç–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å <b>GreenBit</b> –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –≤–Ω–µ—Å–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≤–∫–ª–∞–¥–∞ –≤ –æ—Ö—Ä–∞–Ω—É –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã."
    finally:
        await callback.message.answer(
            text=text_1,
            parse_mode="HTML",
        )
        await callback.message.answer(
            text=text_2,
            parse_mode="HTML",
        )


# –∫–æ–ª–±–µ–∫ –¥–ª—è —Ç–æ–≥–æ –∫–∞–∫ –∫—É–ø–∏—Ç—å
@router.callback_query(F.data == "how_buy")
async def menu_new_how_buy(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    user_language = user_data.get("user_language")
    try:
        if user_language == "en":
            text_1 = "To purchase our token, you can click on the <b>Buy</b> button, which will take you to the site for purchaseüë®‚Äç"
        elif user_language == "ru":
            text_1 = "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ö—É–ø–∏—Ç—å</b>, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –≤–∞—Å –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏üë®‚Äç"
    finally:
        await callback.message.answer_photo(
            caption=text_1,
            parse_mode="HTML",
            photo=who_by_img,
        )


# —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞
@router.callback_query(F.data == "s_w")
async def menu_new_s_w(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text="Change language", reply_markup=language(lang="en", size=2)
    )


@router.callback_query(F.data == "s_w_db")
async def menu_new_s_w_db(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text="Change language", reply_markup=language(lang="en_db", size=2)
    )


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ë–î –∏ FSM
@router.callback_query(F.data == "join")
async def join_new_user(callback: types.CallbackQuery, state: FSMContext):
    text_en = "Now you are with usüíö! Check out the functionality by going to the Menu! -> /menu"
    text_ru = "–¢–µ–ø–µ—Ä—å –≤—ã —Å –Ω–∞–º–∏üíö! –û—Ü–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ–π–¥—è –≤ –ú–µ–Ω—é! -> /menu"

    user_data = await state.get_data()
    user_language = user_data.get("user_language")

    try:
        # –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ user_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–∫–æ–±–∫–∏ () –∏ –∑–∞–ø—è—Ç–∞—è (user_id,) –≤ –∫–æ–Ω—Ü–µ!!!
        user_id = (callback.from_user.id,)
        await create_data(
            data=user_id,
        )
    except Exception as e:
        await callback.message.answer(text="Error :(\nPlease, tyr again")
        print(f"ERROR:{e}")
    else:
        if user_language == "en":
            await callback.message.answer(text=text_en)
        else:
            await callback.message.answer(text=text_ru)
    await update_data(
        column="user_language",
        # –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —è–∑—ã–∫–∞ –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ '' –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        data=f"'{user_language}'",
        args=user_id,
    )
    await state.update_data({"auth_status": 1})
    await state.set_state(Form.auth_status)


# –ë–∞–∑–æ–≤–æ–π –º–µ–Ω—é –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "get_rate")
async def menu_auth_rate(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text="GRB=100000000$")


@router.callback_query(F.data == "buy_tk")
async def menu_auth_buy_tk(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text="You  buy 1GRB!")


@router.callback_query(F.data == "walet")
async def menu_auth_walet(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text="GRWallet\nGRB - 1.0 GRB(100000000BUSD)")


@router.callback_query(F.data == "swap")
async def menu_auth_swap(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text="Swap!")


@router.callback_query(F.data == "setigs")
async def menu_auth_setigs(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer_photo(
        caption="Settigs",
        photo=settings_img,
        reply_markup=settings(lang="en_set", size=2),
    )


@router.callback_query(F.data == "sub")
async def menu_auth_sub(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text="sub!")


@router.callback_query(F.data == "del")
async def dell_account(callback: types.CallbackQuery, state: FSMContext):
    try:
        await delete_data(args=(callback.from_user.id,))
        await state.clear()
    except Exception as e:
        await callback.message.answer(text="Fuck....")
        print(e)
    else:
        await callback.message.answer(text="Account has been deleted.")


@router.callback_query(F.data == "pro")
async def menu_auth_pro(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer_sticker(
        sticker="CAACAgIAAxkBATbJA2W6kH81InpZ96tNjxttywPSGB35AALsGQACi9-5SJcxVjPNzsPdNAQ"
    )
